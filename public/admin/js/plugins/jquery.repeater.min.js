/*!
 * jQuery Repeater
 * Copyright (c) 2015-2018 Brian Woodward
 * Licensed under the MIT license.
 */
(function($) {
    'use strict';

    var Repeater = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Repeater.DEFAULTS, options);
        this.init();
    };

    Repeater.DEFAULTS = {
        show: function() {
            $(this).slideDown();
        },
        hide: function(deleteElement) {
            $(this).slideUp(deleteElement);
        },
        ready: function() {},
        isFirstItemUndeletable: false
    };

    Repeater.prototype.init = function() {
        var that = this;
        this.$element.find('[data-repeater-delete]').on('click', function() {
            that.options.hide.call($(this).closest('[data-repeater-item]'), function() {
                $(this).remove();
            });
        });

        this.$element.find('[data-repeater-add]').on('click', function() {
            that.add();
        });

        this.options.ready.call(this.$element);
    };

    Repeater.prototype.add = function() {
        var that = this;
        var $template = this.$element.find('[data-repeater-item]').first().clone();
        var $items = this.$element.find('[data-repeater-item]');
        var $newItem = $template.clone();

        $newItem.find('[data-repeater-delete]').on('click', function() {
            that.options.hide.call($(this).closest('[data-repeater-item]'), function() {
                $(this).remove();
            });
        });

        this.options.show.call($newItem);
        this.$element.append($newItem);
    };

    $.fn.repeater = function(options) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data('repeater');

            if (!data) {
                $this.data('repeater', (data = new Repeater(this, options)));
            }
        });
    };
})(jQuery);
